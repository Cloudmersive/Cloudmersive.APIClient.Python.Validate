# coding: utf-8

"""
    validateapi

    The validation APIs help you validate data. Check if an E-mail address is real. Check if a domain is real. Check up on an IP address, and even where it is located. All this and much more is available in the validation API.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PublicHolidayOccurrence(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'english_name': 'str',
        'local_name': 'str',
        'occurrence_date': 'datetime',
        'holiday_type': 'str',
        'nationwaide': 'bool'
    }

    attribute_map = {
        'english_name': 'EnglishName',
        'local_name': 'LocalName',
        'occurrence_date': 'OccurrenceDate',
        'holiday_type': 'HolidayType',
        'nationwaide': 'Nationwaide'
    }

    def __init__(self, english_name=None, local_name=None, occurrence_date=None, holiday_type=None, nationwaide=None):  # noqa: E501
        """PublicHolidayOccurrence - a model defined in Swagger"""  # noqa: E501

        self._english_name = None
        self._local_name = None
        self._occurrence_date = None
        self._holiday_type = None
        self._nationwaide = None
        self.discriminator = None

        if english_name is not None:
            self.english_name = english_name
        if local_name is not None:
            self.local_name = local_name
        if occurrence_date is not None:
            self.occurrence_date = occurrence_date
        if holiday_type is not None:
            self.holiday_type = holiday_type
        if nationwaide is not None:
            self.nationwaide = nationwaide

    @property
    def english_name(self):
        """Gets the english_name of this PublicHolidayOccurrence.  # noqa: E501

        Name of the holiday in English  # noqa: E501

        :return: The english_name of this PublicHolidayOccurrence.  # noqa: E501
        :rtype: str
        """
        return self._english_name

    @english_name.setter
    def english_name(self, english_name):
        """Sets the english_name of this PublicHolidayOccurrence.

        Name of the holiday in English  # noqa: E501

        :param english_name: The english_name of this PublicHolidayOccurrence.  # noqa: E501
        :type: str
        """

        self._english_name = english_name

    @property
    def local_name(self):
        """Gets the local_name of this PublicHolidayOccurrence.  # noqa: E501

        Local name of the holiday  # noqa: E501

        :return: The local_name of this PublicHolidayOccurrence.  # noqa: E501
        :rtype: str
        """
        return self._local_name

    @local_name.setter
    def local_name(self, local_name):
        """Sets the local_name of this PublicHolidayOccurrence.

        Local name of the holiday  # noqa: E501

        :param local_name: The local_name of this PublicHolidayOccurrence.  # noqa: E501
        :type: str
        """

        self._local_name = local_name

    @property
    def occurrence_date(self):
        """Gets the occurrence_date of this PublicHolidayOccurrence.  # noqa: E501

        Date of the holiday (start time)  # noqa: E501

        :return: The occurrence_date of this PublicHolidayOccurrence.  # noqa: E501
        :rtype: datetime
        """
        return self._occurrence_date

    @occurrence_date.setter
    def occurrence_date(self, occurrence_date):
        """Sets the occurrence_date of this PublicHolidayOccurrence.

        Date of the holiday (start time)  # noqa: E501

        :param occurrence_date: The occurrence_date of this PublicHolidayOccurrence.  # noqa: E501
        :type: datetime
        """

        self._occurrence_date = occurrence_date

    @property
    def holiday_type(self):
        """Gets the holiday_type of this PublicHolidayOccurrence.  # noqa: E501

        Type of the holiday; possible values are: Public, Bank, School, Authorities, Optional, Observance  # noqa: E501

        :return: The holiday_type of this PublicHolidayOccurrence.  # noqa: E501
        :rtype: str
        """
        return self._holiday_type

    @holiday_type.setter
    def holiday_type(self, holiday_type):
        """Sets the holiday_type of this PublicHolidayOccurrence.

        Type of the holiday; possible values are: Public, Bank, School, Authorities, Optional, Observance  # noqa: E501

        :param holiday_type: The holiday_type of this PublicHolidayOccurrence.  # noqa: E501
        :type: str
        """

        self._holiday_type = holiday_type

    @property
    def nationwaide(self):
        """Gets the nationwaide of this PublicHolidayOccurrence.  # noqa: E501

        True if the holiday is celebrated in all locales in the country, false otherwise  # noqa: E501

        :return: The nationwaide of this PublicHolidayOccurrence.  # noqa: E501
        :rtype: bool
        """
        return self._nationwaide

    @nationwaide.setter
    def nationwaide(self, nationwaide):
        """Sets the nationwaide of this PublicHolidayOccurrence.

        True if the holiday is celebrated in all locales in the country, false otherwise  # noqa: E501

        :param nationwaide: The nationwaide of this PublicHolidayOccurrence.  # noqa: E501
        :type: bool
        """

        self._nationwaide = nationwaide

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PublicHolidayOccurrence, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PublicHolidayOccurrence):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
