# coding: utf-8

"""
    validateapi

    The validation APIs help you validate data. Check if an E-mail address is real. Check if a domain is real. Check up on an IP address, and even where it is located. All this and much more is available in the validation API.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Timezone(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'base_utc_offset': 'str',
        'now': 'datetime'
    }

    attribute_map = {
        'name': 'Name',
        'base_utc_offset': 'BaseUTCOffset',
        'now': 'Now'
    }

    def __init__(self, name=None, base_utc_offset=None, now=None):  # noqa: E501
        """Timezone - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._base_utc_offset = None
        self._now = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if base_utc_offset is not None:
            self.base_utc_offset = base_utc_offset
        if now is not None:
            self.now = now

    @property
    def name(self):
        """Gets the name of this Timezone.  # noqa: E501

        Name of the Time Zone  # noqa: E501

        :return: The name of this Timezone.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Timezone.

        Name of the Time Zone  # noqa: E501

        :param name: The name of this Timezone.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def base_utc_offset(self):
        """Gets the base_utc_offset of this Timezone.  # noqa: E501

        UTC offset for this time zone  # noqa: E501

        :return: The base_utc_offset of this Timezone.  # noqa: E501
        :rtype: str
        """
        return self._base_utc_offset

    @base_utc_offset.setter
    def base_utc_offset(self, base_utc_offset):
        """Sets the base_utc_offset of this Timezone.

        UTC offset for this time zone  # noqa: E501

        :param base_utc_offset: The base_utc_offset of this Timezone.  # noqa: E501
        :type: str
        """

        self._base_utc_offset = base_utc_offset

    @property
    def now(self):
        """Gets the now of this Timezone.  # noqa: E501

        The current time (Now) in this time zone  # noqa: E501

        :return: The now of this Timezone.  # noqa: E501
        :rtype: datetime
        """
        return self._now

    @now.setter
    def now(self, now):
        """Sets the now of this Timezone.

        The current time (Now) in this time zone  # noqa: E501

        :param now: The now of this Timezone.  # noqa: E501
        :type: datetime
        """

        self._now = now

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Timezone, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Timezone):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
