# coding: utf-8

"""
    validateapi

    The validation APIs help you validate data. Check if an E-mail address is real. Check if a domain is real. Check up on an IP address, and even where it is located. All this and much more is available in the validation API.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PhoneNumberValidationResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'is_valid': 'bool',
        'successful': 'bool',
        'phone_number_type': 'str',
        'e164_format': 'str',
        'international_format': 'str',
        'national_format': 'str',
        'country_code': 'str',
        'country_name': 'str'
    }

    attribute_map = {
        'is_valid': 'IsValid',
        'successful': 'Successful',
        'phone_number_type': 'PhoneNumberType',
        'e164_format': 'E164Format',
        'international_format': 'InternationalFormat',
        'national_format': 'NationalFormat',
        'country_code': 'CountryCode',
        'country_name': 'CountryName'
    }

    def __init__(self, is_valid=None, successful=None, phone_number_type=None, e164_format=None, international_format=None, national_format=None, country_code=None, country_name=None):  # noqa: E501
        """PhoneNumberValidationResponse - a model defined in Swagger"""  # noqa: E501

        self._is_valid = None
        self._successful = None
        self._phone_number_type = None
        self._e164_format = None
        self._international_format = None
        self._national_format = None
        self._country_code = None
        self._country_name = None
        self.discriminator = None

        if is_valid is not None:
            self.is_valid = is_valid
        if successful is not None:
            self.successful = successful
        if phone_number_type is not None:
            self.phone_number_type = phone_number_type
        if e164_format is not None:
            self.e164_format = e164_format
        if international_format is not None:
            self.international_format = international_format
        if national_format is not None:
            self.national_format = national_format
        if country_code is not None:
            self.country_code = country_code
        if country_name is not None:
            self.country_name = country_name

    @property
    def is_valid(self):
        """Gets the is_valid of this PhoneNumberValidationResponse.  # noqa: E501

        True if the phone number is valid, false otherwise  # noqa: E501

        :return: The is_valid of this PhoneNumberValidationResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_valid

    @is_valid.setter
    def is_valid(self, is_valid):
        """Sets the is_valid of this PhoneNumberValidationResponse.

        True if the phone number is valid, false otherwise  # noqa: E501

        :param is_valid: The is_valid of this PhoneNumberValidationResponse.  # noqa: E501
        :type: bool
        """

        self._is_valid = is_valid

    @property
    def successful(self):
        """Gets the successful of this PhoneNumberValidationResponse.  # noqa: E501

        True if the operation was successful, false if there was an error during validation.  See IsValid for validation result.  # noqa: E501

        :return: The successful of this PhoneNumberValidationResponse.  # noqa: E501
        :rtype: bool
        """
        return self._successful

    @successful.setter
    def successful(self, successful):
        """Sets the successful of this PhoneNumberValidationResponse.

        True if the operation was successful, false if there was an error during validation.  See IsValid for validation result.  # noqa: E501

        :param successful: The successful of this PhoneNumberValidationResponse.  # noqa: E501
        :type: bool
        """

        self._successful = successful

    @property
    def phone_number_type(self):
        """Gets the phone_number_type of this PhoneNumberValidationResponse.  # noqa: E501

        Type of phone number; possible values are: FixedLine, Mobile, FixedLineOrMobile, TollFree, PremiumRate,   SharedCost, Voip, PersonalNumber, Pager, Uan, Voicemail, Unknown  # noqa: E501

        :return: The phone_number_type of this PhoneNumberValidationResponse.  # noqa: E501
        :rtype: str
        """
        return self._phone_number_type

    @phone_number_type.setter
    def phone_number_type(self, phone_number_type):
        """Sets the phone_number_type of this PhoneNumberValidationResponse.

        Type of phone number; possible values are: FixedLine, Mobile, FixedLineOrMobile, TollFree, PremiumRate,   SharedCost, Voip, PersonalNumber, Pager, Uan, Voicemail, Unknown  # noqa: E501

        :param phone_number_type: The phone_number_type of this PhoneNumberValidationResponse.  # noqa: E501
        :type: str
        """

        self._phone_number_type = phone_number_type

    @property
    def e164_format(self):
        """Gets the e164_format of this PhoneNumberValidationResponse.  # noqa: E501

        E.164 format of the phone number  # noqa: E501

        :return: The e164_format of this PhoneNumberValidationResponse.  # noqa: E501
        :rtype: str
        """
        return self._e164_format

    @e164_format.setter
    def e164_format(self, e164_format):
        """Sets the e164_format of this PhoneNumberValidationResponse.

        E.164 format of the phone number  # noqa: E501

        :param e164_format: The e164_format of this PhoneNumberValidationResponse.  # noqa: E501
        :type: str
        """

        self._e164_format = e164_format

    @property
    def international_format(self):
        """Gets the international_format of this PhoneNumberValidationResponse.  # noqa: E501

        Internaltional format of the phone number  # noqa: E501

        :return: The international_format of this PhoneNumberValidationResponse.  # noqa: E501
        :rtype: str
        """
        return self._international_format

    @international_format.setter
    def international_format(self, international_format):
        """Sets the international_format of this PhoneNumberValidationResponse.

        Internaltional format of the phone number  # noqa: E501

        :param international_format: The international_format of this PhoneNumberValidationResponse.  # noqa: E501
        :type: str
        """

        self._international_format = international_format

    @property
    def national_format(self):
        """Gets the national_format of this PhoneNumberValidationResponse.  # noqa: E501

        National format of the phone number  # noqa: E501

        :return: The national_format of this PhoneNumberValidationResponse.  # noqa: E501
        :rtype: str
        """
        return self._national_format

    @national_format.setter
    def national_format(self, national_format):
        """Sets the national_format of this PhoneNumberValidationResponse.

        National format of the phone number  # noqa: E501

        :param national_format: The national_format of this PhoneNumberValidationResponse.  # noqa: E501
        :type: str
        """

        self._national_format = national_format

    @property
    def country_code(self):
        """Gets the country_code of this PhoneNumberValidationResponse.  # noqa: E501

        Two digit country code of the phone number  # noqa: E501

        :return: The country_code of this PhoneNumberValidationResponse.  # noqa: E501
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this PhoneNumberValidationResponse.

        Two digit country code of the phone number  # noqa: E501

        :param country_code: The country_code of this PhoneNumberValidationResponse.  # noqa: E501
        :type: str
        """

        self._country_code = country_code

    @property
    def country_name(self):
        """Gets the country_name of this PhoneNumberValidationResponse.  # noqa: E501

        User-friendly long name of the country for the phone number  # noqa: E501

        :return: The country_name of this PhoneNumberValidationResponse.  # noqa: E501
        :rtype: str
        """
        return self._country_name

    @country_name.setter
    def country_name(self, country_name):
        """Sets the country_name of this PhoneNumberValidationResponse.

        User-friendly long name of the country for the phone number  # noqa: E501

        :param country_name: The country_name of this PhoneNumberValidationResponse.  # noqa: E501
        :type: str
        """

        self._country_name = country_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PhoneNumberValidationResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PhoneNumberValidationResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
