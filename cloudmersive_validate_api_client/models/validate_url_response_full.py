# coding: utf-8

"""
    validateapi

    The validation APIs help you validate data. Check if an E-mail address is real. Check if a domain is real. Check up on an IP address, and even where it is located. All this and much more is available in the validation API.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ValidateUrlResponseFull(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'valid_url': 'bool',
        'valid_syntax': 'bool',
        'valid_domain': 'bool',
        'valid_endpoint': 'bool',
        'well_formed_url': 'str'
    }

    attribute_map = {
        'valid_url': 'ValidURL',
        'valid_syntax': 'Valid_Syntax',
        'valid_domain': 'Valid_Domain',
        'valid_endpoint': 'Valid_Endpoint',
        'well_formed_url': 'WellFormedURL'
    }

    def __init__(self, valid_url=None, valid_syntax=None, valid_domain=None, valid_endpoint=None, well_formed_url=None):  # noqa: E501
        """ValidateUrlResponseFull - a model defined in Swagger"""  # noqa: E501

        self._valid_url = None
        self._valid_syntax = None
        self._valid_domain = None
        self._valid_endpoint = None
        self._well_formed_url = None
        self.discriminator = None

        if valid_url is not None:
            self.valid_url = valid_url
        if valid_syntax is not None:
            self.valid_syntax = valid_syntax
        if valid_domain is not None:
            self.valid_domain = valid_domain
        if valid_endpoint is not None:
            self.valid_endpoint = valid_endpoint
        if well_formed_url is not None:
            self.well_formed_url = well_formed_url

    @property
    def valid_url(self):
        """Gets the valid_url of this ValidateUrlResponseFull.  # noqa: E501

        True if the URL has valid syntax, a valid domain, a valid endpoint, and passes virus scan checks; false otherwise  # noqa: E501

        :return: The valid_url of this ValidateUrlResponseFull.  # noqa: E501
        :rtype: bool
        """
        return self._valid_url

    @valid_url.setter
    def valid_url(self, valid_url):
        """Sets the valid_url of this ValidateUrlResponseFull.

        True if the URL has valid syntax, a valid domain, a valid endpoint, and passes virus scan checks; false otherwise  # noqa: E501

        :param valid_url: The valid_url of this ValidateUrlResponseFull.  # noqa: E501
        :type: bool
        """

        self._valid_url = valid_url

    @property
    def valid_syntax(self):
        """Gets the valid_syntax of this ValidateUrlResponseFull.  # noqa: E501

        True if the URL has valid syntax, false otherwise  # noqa: E501

        :return: The valid_syntax of this ValidateUrlResponseFull.  # noqa: E501
        :rtype: bool
        """
        return self._valid_syntax

    @valid_syntax.setter
    def valid_syntax(self, valid_syntax):
        """Sets the valid_syntax of this ValidateUrlResponseFull.

        True if the URL has valid syntax, false otherwise  # noqa: E501

        :param valid_syntax: The valid_syntax of this ValidateUrlResponseFull.  # noqa: E501
        :type: bool
        """

        self._valid_syntax = valid_syntax

    @property
    def valid_domain(self):
        """Gets the valid_domain of this ValidateUrlResponseFull.  # noqa: E501

        True if the domain name is valid and exists, false otherwise  # noqa: E501

        :return: The valid_domain of this ValidateUrlResponseFull.  # noqa: E501
        :rtype: bool
        """
        return self._valid_domain

    @valid_domain.setter
    def valid_domain(self, valid_domain):
        """Sets the valid_domain of this ValidateUrlResponseFull.

        True if the domain name is valid and exists, false otherwise  # noqa: E501

        :param valid_domain: The valid_domain of this ValidateUrlResponseFull.  # noqa: E501
        :type: bool
        """

        self._valid_domain = valid_domain

    @property
    def valid_endpoint(self):
        """Gets the valid_endpoint of this ValidateUrlResponseFull.  # noqa: E501

        True if the endpoint is up and responsive and passes a virus scan check, false otherwise  # noqa: E501

        :return: The valid_endpoint of this ValidateUrlResponseFull.  # noqa: E501
        :rtype: bool
        """
        return self._valid_endpoint

    @valid_endpoint.setter
    def valid_endpoint(self, valid_endpoint):
        """Sets the valid_endpoint of this ValidateUrlResponseFull.

        True if the endpoint is up and responsive and passes a virus scan check, false otherwise  # noqa: E501

        :param valid_endpoint: The valid_endpoint of this ValidateUrlResponseFull.  # noqa: E501
        :type: bool
        """

        self._valid_endpoint = valid_endpoint

    @property
    def well_formed_url(self):
        """Gets the well_formed_url of this ValidateUrlResponseFull.  # noqa: E501

        Well-formed version of the URL  # noqa: E501

        :return: The well_formed_url of this ValidateUrlResponseFull.  # noqa: E501
        :rtype: str
        """
        return self._well_formed_url

    @well_formed_url.setter
    def well_formed_url(self, well_formed_url):
        """Sets the well_formed_url of this ValidateUrlResponseFull.

        Well-formed version of the URL  # noqa: E501

        :param well_formed_url: The well_formed_url of this ValidateUrlResponseFull.  # noqa: E501
        :type: str
        """

        self._well_formed_url = well_formed_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ValidateUrlResponseFull, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ValidateUrlResponseFull):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
