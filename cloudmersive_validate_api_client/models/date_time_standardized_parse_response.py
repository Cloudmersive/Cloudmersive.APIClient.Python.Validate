# coding: utf-8

"""
    validateapi

    The validation APIs help you validate data. Check if an E-mail address is real. Check if a domain is real. Check up on an IP address, and even where it is located. All this and much more is available in the validation API.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DateTimeStandardizedParseResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'successful': 'bool',
        'parsed_date_result': 'datetime',
        'year': 'int',
        'month': 'int',
        'day': 'int',
        'hour': 'int',
        'minute': 'int',
        'second': 'int',
        'day_of_week': 'str'
    }

    attribute_map = {
        'successful': 'Successful',
        'parsed_date_result': 'ParsedDateResult',
        'year': 'Year',
        'month': 'Month',
        'day': 'Day',
        'hour': 'Hour',
        'minute': 'Minute',
        'second': 'Second',
        'day_of_week': 'DayOfWeek'
    }

    def __init__(self, successful=None, parsed_date_result=None, year=None, month=None, day=None, hour=None, minute=None, second=None, day_of_week=None):  # noqa: E501
        """DateTimeStandardizedParseResponse - a model defined in Swagger"""  # noqa: E501

        self._successful = None
        self._parsed_date_result = None
        self._year = None
        self._month = None
        self._day = None
        self._hour = None
        self._minute = None
        self._second = None
        self._day_of_week = None
        self.discriminator = None

        if successful is not None:
            self.successful = successful
        if parsed_date_result is not None:
            self.parsed_date_result = parsed_date_result
        if year is not None:
            self.year = year
        if month is not None:
            self.month = month
        if day is not None:
            self.day = day
        if hour is not None:
            self.hour = hour
        if minute is not None:
            self.minute = minute
        if second is not None:
            self.second = second
        if day_of_week is not None:
            self.day_of_week = day_of_week

    @property
    def successful(self):
        """Gets the successful of this DateTimeStandardizedParseResponse.  # noqa: E501

        True if successful, false otherwise  # noqa: E501

        :return: The successful of this DateTimeStandardizedParseResponse.  # noqa: E501
        :rtype: bool
        """
        return self._successful

    @successful.setter
    def successful(self, successful):
        """Sets the successful of this DateTimeStandardizedParseResponse.

        True if successful, false otherwise  # noqa: E501

        :param successful: The successful of this DateTimeStandardizedParseResponse.  # noqa: E501
        :type: bool
        """

        self._successful = successful

    @property
    def parsed_date_result(self):
        """Gets the parsed_date_result of this DateTimeStandardizedParseResponse.  # noqa: E501

        Result of performing a date time parsing  # noqa: E501

        :return: The parsed_date_result of this DateTimeStandardizedParseResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._parsed_date_result

    @parsed_date_result.setter
    def parsed_date_result(self, parsed_date_result):
        """Sets the parsed_date_result of this DateTimeStandardizedParseResponse.

        Result of performing a date time parsing  # noqa: E501

        :param parsed_date_result: The parsed_date_result of this DateTimeStandardizedParseResponse.  # noqa: E501
        :type: datetime
        """

        self._parsed_date_result = parsed_date_result

    @property
    def year(self):
        """Gets the year of this DateTimeStandardizedParseResponse.  # noqa: E501

        Year of the parsed date time result  # noqa: E501

        :return: The year of this DateTimeStandardizedParseResponse.  # noqa: E501
        :rtype: int
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this DateTimeStandardizedParseResponse.

        Year of the parsed date time result  # noqa: E501

        :param year: The year of this DateTimeStandardizedParseResponse.  # noqa: E501
        :type: int
        """

        self._year = year

    @property
    def month(self):
        """Gets the month of this DateTimeStandardizedParseResponse.  # noqa: E501

        Month of the parsed date time result  # noqa: E501

        :return: The month of this DateTimeStandardizedParseResponse.  # noqa: E501
        :rtype: int
        """
        return self._month

    @month.setter
    def month(self, month):
        """Sets the month of this DateTimeStandardizedParseResponse.

        Month of the parsed date time result  # noqa: E501

        :param month: The month of this DateTimeStandardizedParseResponse.  # noqa: E501
        :type: int
        """

        self._month = month

    @property
    def day(self):
        """Gets the day of this DateTimeStandardizedParseResponse.  # noqa: E501

        Day of the parsed date time result  # noqa: E501

        :return: The day of this DateTimeStandardizedParseResponse.  # noqa: E501
        :rtype: int
        """
        return self._day

    @day.setter
    def day(self, day):
        """Sets the day of this DateTimeStandardizedParseResponse.

        Day of the parsed date time result  # noqa: E501

        :param day: The day of this DateTimeStandardizedParseResponse.  # noqa: E501
        :type: int
        """

        self._day = day

    @property
    def hour(self):
        """Gets the hour of this DateTimeStandardizedParseResponse.  # noqa: E501

        Hour of the parsed date time result (24-hour)  # noqa: E501

        :return: The hour of this DateTimeStandardizedParseResponse.  # noqa: E501
        :rtype: int
        """
        return self._hour

    @hour.setter
    def hour(self, hour):
        """Sets the hour of this DateTimeStandardizedParseResponse.

        Hour of the parsed date time result (24-hour)  # noqa: E501

        :param hour: The hour of this DateTimeStandardizedParseResponse.  # noqa: E501
        :type: int
        """

        self._hour = hour

    @property
    def minute(self):
        """Gets the minute of this DateTimeStandardizedParseResponse.  # noqa: E501

        Minute of the parsed date time result  # noqa: E501

        :return: The minute of this DateTimeStandardizedParseResponse.  # noqa: E501
        :rtype: int
        """
        return self._minute

    @minute.setter
    def minute(self, minute):
        """Sets the minute of this DateTimeStandardizedParseResponse.

        Minute of the parsed date time result  # noqa: E501

        :param minute: The minute of this DateTimeStandardizedParseResponse.  # noqa: E501
        :type: int
        """

        self._minute = minute

    @property
    def second(self):
        """Gets the second of this DateTimeStandardizedParseResponse.  # noqa: E501

        Second of the parsed date time result  # noqa: E501

        :return: The second of this DateTimeStandardizedParseResponse.  # noqa: E501
        :rtype: int
        """
        return self._second

    @second.setter
    def second(self, second):
        """Sets the second of this DateTimeStandardizedParseResponse.

        Second of the parsed date time result  # noqa: E501

        :param second: The second of this DateTimeStandardizedParseResponse.  # noqa: E501
        :type: int
        """

        self._second = second

    @property
    def day_of_week(self):
        """Gets the day_of_week of this DateTimeStandardizedParseResponse.  # noqa: E501

        Day of week  # noqa: E501

        :return: The day_of_week of this DateTimeStandardizedParseResponse.  # noqa: E501
        :rtype: str
        """
        return self._day_of_week

    @day_of_week.setter
    def day_of_week(self, day_of_week):
        """Sets the day_of_week of this DateTimeStandardizedParseResponse.

        Day of week  # noqa: E501

        :param day_of_week: The day_of_week of this DateTimeStandardizedParseResponse.  # noqa: E501
        :type: str
        """

        self._day_of_week = day_of_week

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DateTimeStandardizedParseResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DateTimeStandardizedParseResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
