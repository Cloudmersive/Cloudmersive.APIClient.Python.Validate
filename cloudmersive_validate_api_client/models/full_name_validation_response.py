# coding: utf-8

"""
    validateapi

    The validation APIs help you validate data. Check if an E-mail address is real. Check if a domain is real. Check up on an IP address, and even where it is located. All this and much more is available in the validation API.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class FullNameValidationResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'successful': 'bool',
        'validation_result_first_name': 'str',
        'validation_result_last_name': 'str',
        'title': 'str',
        'first_name': 'str',
        'middle_name': 'str',
        'last_name': 'str',
        'nick_name': 'str',
        'suffix': 'str',
        'display_name': 'str'
    }

    attribute_map = {
        'successful': 'Successful',
        'validation_result_first_name': 'ValidationResult_FirstName',
        'validation_result_last_name': 'ValidationResult_LastName',
        'title': 'Title',
        'first_name': 'FirstName',
        'middle_name': 'MiddleName',
        'last_name': 'LastName',
        'nick_name': 'NickName',
        'suffix': 'Suffix',
        'display_name': 'DisplayName'
    }

    def __init__(self, successful=None, validation_result_first_name=None, validation_result_last_name=None, title=None, first_name=None, middle_name=None, last_name=None, nick_name=None, suffix=None, display_name=None):  # noqa: E501
        """FullNameValidationResponse - a model defined in Swagger"""  # noqa: E501

        self._successful = None
        self._validation_result_first_name = None
        self._validation_result_last_name = None
        self._title = None
        self._first_name = None
        self._middle_name = None
        self._last_name = None
        self._nick_name = None
        self._suffix = None
        self._display_name = None
        self.discriminator = None

        if successful is not None:
            self.successful = successful
        if validation_result_first_name is not None:
            self.validation_result_first_name = validation_result_first_name
        if validation_result_last_name is not None:
            self.validation_result_last_name = validation_result_last_name
        if title is not None:
            self.title = title
        if first_name is not None:
            self.first_name = first_name
        if middle_name is not None:
            self.middle_name = middle_name
        if last_name is not None:
            self.last_name = last_name
        if nick_name is not None:
            self.nick_name = nick_name
        if suffix is not None:
            self.suffix = suffix
        if display_name is not None:
            self.display_name = display_name

    @property
    def successful(self):
        """Gets the successful of this FullNameValidationResponse.  # noqa: E501

        True if the validation operation was successful, false otherwise  # noqa: E501

        :return: The successful of this FullNameValidationResponse.  # noqa: E501
        :rtype: bool
        """
        return self._successful

    @successful.setter
    def successful(self, successful):
        """Sets the successful of this FullNameValidationResponse.

        True if the validation operation was successful, false otherwise  # noqa: E501

        :param successful: The successful of this FullNameValidationResponse.  # noqa: E501
        :type: bool
        """

        self._successful = successful

    @property
    def validation_result_first_name(self):
        """Gets the validation_result_first_name of this FullNameValidationResponse.  # noqa: E501

        Possible values are: ValidFirstName, ValidUnknownFirstName, InvalidSpamInput, InvalidCharacters, InvalidEmpty  # noqa: E501

        :return: The validation_result_first_name of this FullNameValidationResponse.  # noqa: E501
        :rtype: str
        """
        return self._validation_result_first_name

    @validation_result_first_name.setter
    def validation_result_first_name(self, validation_result_first_name):
        """Sets the validation_result_first_name of this FullNameValidationResponse.

        Possible values are: ValidFirstName, ValidUnknownFirstName, InvalidSpamInput, InvalidCharacters, InvalidEmpty  # noqa: E501

        :param validation_result_first_name: The validation_result_first_name of this FullNameValidationResponse.  # noqa: E501
        :type: str
        """

        self._validation_result_first_name = validation_result_first_name

    @property
    def validation_result_last_name(self):
        """Gets the validation_result_last_name of this FullNameValidationResponse.  # noqa: E501

        Possible values are: ValidLastName, ValidUnknownLastName, InvalidSpamInput, InvalidCharacters, InvalidEmpty  # noqa: E501

        :return: The validation_result_last_name of this FullNameValidationResponse.  # noqa: E501
        :rtype: str
        """
        return self._validation_result_last_name

    @validation_result_last_name.setter
    def validation_result_last_name(self, validation_result_last_name):
        """Sets the validation_result_last_name of this FullNameValidationResponse.

        Possible values are: ValidLastName, ValidUnknownLastName, InvalidSpamInput, InvalidCharacters, InvalidEmpty  # noqa: E501

        :param validation_result_last_name: The validation_result_last_name of this FullNameValidationResponse.  # noqa: E501
        :type: str
        """

        self._validation_result_last_name = validation_result_last_name

    @property
    def title(self):
        """Gets the title of this FullNameValidationResponse.  # noqa: E501

        The person's title (if supplied), e.g. \"Mr.\" or \"Ms.\"  # noqa: E501

        :return: The title of this FullNameValidationResponse.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this FullNameValidationResponse.

        The person's title (if supplied), e.g. \"Mr.\" or \"Ms.\"  # noqa: E501

        :param title: The title of this FullNameValidationResponse.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def first_name(self):
        """Gets the first_name of this FullNameValidationResponse.  # noqa: E501

        The first name (given name)  # noqa: E501

        :return: The first_name of this FullNameValidationResponse.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this FullNameValidationResponse.

        The first name (given name)  # noqa: E501

        :param first_name: The first_name of this FullNameValidationResponse.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def middle_name(self):
        """Gets the middle_name of this FullNameValidationResponse.  # noqa: E501

        The middle name(s); if there are multiple names they will be separated by spaces  # noqa: E501

        :return: The middle_name of this FullNameValidationResponse.  # noqa: E501
        :rtype: str
        """
        return self._middle_name

    @middle_name.setter
    def middle_name(self, middle_name):
        """Sets the middle_name of this FullNameValidationResponse.

        The middle name(s); if there are multiple names they will be separated by spaces  # noqa: E501

        :param middle_name: The middle_name of this FullNameValidationResponse.  # noqa: E501
        :type: str
        """

        self._middle_name = middle_name

    @property
    def last_name(self):
        """Gets the last_name of this FullNameValidationResponse.  # noqa: E501

        The last name (surname)  # noqa: E501

        :return: The last_name of this FullNameValidationResponse.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this FullNameValidationResponse.

        The last name (surname)  # noqa: E501

        :param last_name: The last_name of this FullNameValidationResponse.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def nick_name(self):
        """Gets the nick_name of this FullNameValidationResponse.  # noqa: E501

        Nickname (if supplied)  # noqa: E501

        :return: The nick_name of this FullNameValidationResponse.  # noqa: E501
        :rtype: str
        """
        return self._nick_name

    @nick_name.setter
    def nick_name(self, nick_name):
        """Sets the nick_name of this FullNameValidationResponse.

        Nickname (if supplied)  # noqa: E501

        :param nick_name: The nick_name of this FullNameValidationResponse.  # noqa: E501
        :type: str
        """

        self._nick_name = nick_name

    @property
    def suffix(self):
        """Gets the suffix of this FullNameValidationResponse.  # noqa: E501

        Suffix to the name, e.g. \"Jr.\" or \"Sr.\"  # noqa: E501

        :return: The suffix of this FullNameValidationResponse.  # noqa: E501
        :rtype: str
        """
        return self._suffix

    @suffix.setter
    def suffix(self, suffix):
        """Sets the suffix of this FullNameValidationResponse.

        Suffix to the name, e.g. \"Jr.\" or \"Sr.\"  # noqa: E501

        :param suffix: The suffix of this FullNameValidationResponse.  # noqa: E501
        :type: str
        """

        self._suffix = suffix

    @property
    def display_name(self):
        """Gets the display_name of this FullNameValidationResponse.  # noqa: E501

        The full display name of the name  # noqa: E501

        :return: The display_name of this FullNameValidationResponse.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this FullNameValidationResponse.

        The full display name of the name  # noqa: E501

        :param display_name: The display_name of this FullNameValidationResponse.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FullNameValidationResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FullNameValidationResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
