# coding: utf-8

"""
    validateapi

    The validation APIs help you validate data. Check if an E-mail address is real. Check if a domain is real. Check up on an IP address, and even where it is located. All this and much more is available in the validation API.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ValidateIdentifierRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'input': 'str',
        'allow_whitespace': 'bool',
        'allow_hyphens': 'bool',
        'allow_underscore': 'bool',
        'allow_numbers': 'bool',
        'allow_periods': 'bool',
        'max_length': 'int',
        'min_length': 'int'
    }

    attribute_map = {
        'input': 'Input',
        'allow_whitespace': 'AllowWhitespace',
        'allow_hyphens': 'AllowHyphens',
        'allow_underscore': 'AllowUnderscore',
        'allow_numbers': 'AllowNumbers',
        'allow_periods': 'AllowPeriods',
        'max_length': 'MaxLength',
        'min_length': 'MinLength'
    }

    def __init__(self, input=None, allow_whitespace=None, allow_hyphens=None, allow_underscore=None, allow_numbers=None, allow_periods=None, max_length=None, min_length=None):  # noqa: E501
        """ValidateIdentifierRequest - a model defined in Swagger"""  # noqa: E501

        self._input = None
        self._allow_whitespace = None
        self._allow_hyphens = None
        self._allow_underscore = None
        self._allow_numbers = None
        self._allow_periods = None
        self._max_length = None
        self._min_length = None
        self.discriminator = None

        if input is not None:
            self.input = input
        if allow_whitespace is not None:
            self.allow_whitespace = allow_whitespace
        if allow_hyphens is not None:
            self.allow_hyphens = allow_hyphens
        if allow_underscore is not None:
            self.allow_underscore = allow_underscore
        if allow_numbers is not None:
            self.allow_numbers = allow_numbers
        if allow_periods is not None:
            self.allow_periods = allow_periods
        if max_length is not None:
            self.max_length = max_length
        if min_length is not None:
            self.min_length = min_length

    @property
    def input(self):
        """Gets the input of this ValidateIdentifierRequest.  # noqa: E501

        Text string identifier input  # noqa: E501

        :return: The input of this ValidateIdentifierRequest.  # noqa: E501
        :rtype: str
        """
        return self._input

    @input.setter
    def input(self, input):
        """Sets the input of this ValidateIdentifierRequest.

        Text string identifier input  # noqa: E501

        :param input: The input of this ValidateIdentifierRequest.  # noqa: E501
        :type: str
        """

        self._input = input

    @property
    def allow_whitespace(self):
        """Gets the allow_whitespace of this ValidateIdentifierRequest.  # noqa: E501

        True if whitespace is allowed in the identifier, false otherwise  # noqa: E501

        :return: The allow_whitespace of this ValidateIdentifierRequest.  # noqa: E501
        :rtype: bool
        """
        return self._allow_whitespace

    @allow_whitespace.setter
    def allow_whitespace(self, allow_whitespace):
        """Sets the allow_whitespace of this ValidateIdentifierRequest.

        True if whitespace is allowed in the identifier, false otherwise  # noqa: E501

        :param allow_whitespace: The allow_whitespace of this ValidateIdentifierRequest.  # noqa: E501
        :type: bool
        """

        self._allow_whitespace = allow_whitespace

    @property
    def allow_hyphens(self):
        """Gets the allow_hyphens of this ValidateIdentifierRequest.  # noqa: E501

        True if hyphens are allowd in the identifier, false otherwise  # noqa: E501

        :return: The allow_hyphens of this ValidateIdentifierRequest.  # noqa: E501
        :rtype: bool
        """
        return self._allow_hyphens

    @allow_hyphens.setter
    def allow_hyphens(self, allow_hyphens):
        """Sets the allow_hyphens of this ValidateIdentifierRequest.

        True if hyphens are allowd in the identifier, false otherwise  # noqa: E501

        :param allow_hyphens: The allow_hyphens of this ValidateIdentifierRequest.  # noqa: E501
        :type: bool
        """

        self._allow_hyphens = allow_hyphens

    @property
    def allow_underscore(self):
        """Gets the allow_underscore of this ValidateIdentifierRequest.  # noqa: E501

        True if underscores are allowed in the identifier, false otherwise  # noqa: E501

        :return: The allow_underscore of this ValidateIdentifierRequest.  # noqa: E501
        :rtype: bool
        """
        return self._allow_underscore

    @allow_underscore.setter
    def allow_underscore(self, allow_underscore):
        """Sets the allow_underscore of this ValidateIdentifierRequest.

        True if underscores are allowed in the identifier, false otherwise  # noqa: E501

        :param allow_underscore: The allow_underscore of this ValidateIdentifierRequest.  # noqa: E501
        :type: bool
        """

        self._allow_underscore = allow_underscore

    @property
    def allow_numbers(self):
        """Gets the allow_numbers of this ValidateIdentifierRequest.  # noqa: E501

        True if numbers are allowed in the identifier, false otherwise  # noqa: E501

        :return: The allow_numbers of this ValidateIdentifierRequest.  # noqa: E501
        :rtype: bool
        """
        return self._allow_numbers

    @allow_numbers.setter
    def allow_numbers(self, allow_numbers):
        """Sets the allow_numbers of this ValidateIdentifierRequest.

        True if numbers are allowed in the identifier, false otherwise  # noqa: E501

        :param allow_numbers: The allow_numbers of this ValidateIdentifierRequest.  # noqa: E501
        :type: bool
        """

        self._allow_numbers = allow_numbers

    @property
    def allow_periods(self):
        """Gets the allow_periods of this ValidateIdentifierRequest.  # noqa: E501

        True if periods are allowed in the identifier, false otherwise  # noqa: E501

        :return: The allow_periods of this ValidateIdentifierRequest.  # noqa: E501
        :rtype: bool
        """
        return self._allow_periods

    @allow_periods.setter
    def allow_periods(self, allow_periods):
        """Sets the allow_periods of this ValidateIdentifierRequest.

        True if periods are allowed in the identifier, false otherwise  # noqa: E501

        :param allow_periods: The allow_periods of this ValidateIdentifierRequest.  # noqa: E501
        :type: bool
        """

        self._allow_periods = allow_periods

    @property
    def max_length(self):
        """Gets the max_length of this ValidateIdentifierRequest.  # noqa: E501

        Optional; maximum length, if any, of the identifier  # noqa: E501

        :return: The max_length of this ValidateIdentifierRequest.  # noqa: E501
        :rtype: int
        """
        return self._max_length

    @max_length.setter
    def max_length(self, max_length):
        """Sets the max_length of this ValidateIdentifierRequest.

        Optional; maximum length, if any, of the identifier  # noqa: E501

        :param max_length: The max_length of this ValidateIdentifierRequest.  # noqa: E501
        :type: int
        """

        self._max_length = max_length

    @property
    def min_length(self):
        """Gets the min_length of this ValidateIdentifierRequest.  # noqa: E501

        Optional; minimum length, if any, of the identifier  # noqa: E501

        :return: The min_length of this ValidateIdentifierRequest.  # noqa: E501
        :rtype: int
        """
        return self._min_length

    @min_length.setter
    def min_length(self, min_length):
        """Sets the min_length of this ValidateIdentifierRequest.

        Optional; minimum length, if any, of the identifier  # noqa: E501

        :param min_length: The min_length of this ValidateIdentifierRequest.  # noqa: E501
        :type: int
        """

        self._min_length = min_length

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ValidateIdentifierRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ValidateIdentifierRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
