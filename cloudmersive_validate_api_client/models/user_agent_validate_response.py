# coding: utf-8

"""
    validateapi

    The validation APIs help you validate data. Check if an E-mail address is real. Check if a domain is real. Check up on an IP address, and even where it is located. All this and much more is available in the validation API.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class UserAgentValidateResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'successful': 'bool',
        'is_bot': 'bool',
        'bot_name': 'str',
        'bot_url': 'str',
        'operating_system': 'str',
        'operating_system_cpu_platform': 'str',
        'operating_system_version': 'str',
        'device_type': 'str',
        'device_brand_name': 'str',
        'device_model': 'str',
        'browser_name': 'str',
        'browser_version': 'str',
        'browser_engine_name': 'str',
        'browser_engine_version': 'str'
    }

    attribute_map = {
        'successful': 'Successful',
        'is_bot': 'IsBot',
        'bot_name': 'BotName',
        'bot_url': 'BotURL',
        'operating_system': 'OperatingSystem',
        'operating_system_cpu_platform': 'OperatingSystemCPUPlatform',
        'operating_system_version': 'OperatingSystemVersion',
        'device_type': 'DeviceType',
        'device_brand_name': 'DeviceBrandName',
        'device_model': 'DeviceModel',
        'browser_name': 'BrowserName',
        'browser_version': 'BrowserVersion',
        'browser_engine_name': 'BrowserEngineName',
        'browser_engine_version': 'BrowserEngineVersion'
    }

    def __init__(self, successful=None, is_bot=None, bot_name=None, bot_url=None, operating_system=None, operating_system_cpu_platform=None, operating_system_version=None, device_type=None, device_brand_name=None, device_model=None, browser_name=None, browser_version=None, browser_engine_name=None, browser_engine_version=None):  # noqa: E501
        """UserAgentValidateResponse - a model defined in Swagger"""  # noqa: E501

        self._successful = None
        self._is_bot = None
        self._bot_name = None
        self._bot_url = None
        self._operating_system = None
        self._operating_system_cpu_platform = None
        self._operating_system_version = None
        self._device_type = None
        self._device_brand_name = None
        self._device_model = None
        self._browser_name = None
        self._browser_version = None
        self._browser_engine_name = None
        self._browser_engine_version = None
        self.discriminator = None

        if successful is not None:
            self.successful = successful
        if is_bot is not None:
            self.is_bot = is_bot
        if bot_name is not None:
            self.bot_name = bot_name
        if bot_url is not None:
            self.bot_url = bot_url
        if operating_system is not None:
            self.operating_system = operating_system
        if operating_system_cpu_platform is not None:
            self.operating_system_cpu_platform = operating_system_cpu_platform
        if operating_system_version is not None:
            self.operating_system_version = operating_system_version
        if device_type is not None:
            self.device_type = device_type
        if device_brand_name is not None:
            self.device_brand_name = device_brand_name
        if device_model is not None:
            self.device_model = device_model
        if browser_name is not None:
            self.browser_name = browser_name
        if browser_version is not None:
            self.browser_version = browser_version
        if browser_engine_name is not None:
            self.browser_engine_name = browser_engine_name
        if browser_engine_version is not None:
            self.browser_engine_version = browser_engine_version

    @property
    def successful(self):
        """Gets the successful of this UserAgentValidateResponse.  # noqa: E501

        True if the operation was successful, false otherwise  # noqa: E501

        :return: The successful of this UserAgentValidateResponse.  # noqa: E501
        :rtype: bool
        """
        return self._successful

    @successful.setter
    def successful(self, successful):
        """Sets the successful of this UserAgentValidateResponse.

        True if the operation was successful, false otherwise  # noqa: E501

        :param successful: The successful of this UserAgentValidateResponse.  # noqa: E501
        :type: bool
        """

        self._successful = successful

    @property
    def is_bot(self):
        """Gets the is_bot of this UserAgentValidateResponse.  # noqa: E501

        True if the request is a known robot, false otherwise  # noqa: E501

        :return: The is_bot of this UserAgentValidateResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_bot

    @is_bot.setter
    def is_bot(self, is_bot):
        """Sets the is_bot of this UserAgentValidateResponse.

        True if the request is a known robot, false otherwise  # noqa: E501

        :param is_bot: The is_bot of this UserAgentValidateResponse.  # noqa: E501
        :type: bool
        """

        self._is_bot = is_bot

    @property
    def bot_name(self):
        """Gets the bot_name of this UserAgentValidateResponse.  # noqa: E501

        Optional; name of the robot if the request was from a known robot, otherwise null  # noqa: E501

        :return: The bot_name of this UserAgentValidateResponse.  # noqa: E501
        :rtype: str
        """
        return self._bot_name

    @bot_name.setter
    def bot_name(self, bot_name):
        """Sets the bot_name of this UserAgentValidateResponse.

        Optional; name of the robot if the request was from a known robot, otherwise null  # noqa: E501

        :param bot_name: The bot_name of this UserAgentValidateResponse.  # noqa: E501
        :type: str
        """

        self._bot_name = bot_name

    @property
    def bot_url(self):
        """Gets the bot_url of this UserAgentValidateResponse.  # noqa: E501

        Optional; if available, the URL to the robot  # noqa: E501

        :return: The bot_url of this UserAgentValidateResponse.  # noqa: E501
        :rtype: str
        """
        return self._bot_url

    @bot_url.setter
    def bot_url(self, bot_url):
        """Sets the bot_url of this UserAgentValidateResponse.

        Optional; if available, the URL to the robot  # noqa: E501

        :param bot_url: The bot_url of this UserAgentValidateResponse.  # noqa: E501
        :type: str
        """

        self._bot_url = bot_url

    @property
    def operating_system(self):
        """Gets the operating_system of this UserAgentValidateResponse.  # noqa: E501

        Operating System of the User-Agent (e.g. Windows)  # noqa: E501

        :return: The operating_system of this UserAgentValidateResponse.  # noqa: E501
        :rtype: str
        """
        return self._operating_system

    @operating_system.setter
    def operating_system(self, operating_system):
        """Sets the operating_system of this UserAgentValidateResponse.

        Operating System of the User-Agent (e.g. Windows)  # noqa: E501

        :param operating_system: The operating_system of this UserAgentValidateResponse.  # noqa: E501
        :type: str
        """

        self._operating_system = operating_system

    @property
    def operating_system_cpu_platform(self):
        """Gets the operating_system_cpu_platform of this UserAgentValidateResponse.  # noqa: E501

        The CPU platform of the User-Agent (e.g. x64)  # noqa: E501

        :return: The operating_system_cpu_platform of this UserAgentValidateResponse.  # noqa: E501
        :rtype: str
        """
        return self._operating_system_cpu_platform

    @operating_system_cpu_platform.setter
    def operating_system_cpu_platform(self, operating_system_cpu_platform):
        """Sets the operating_system_cpu_platform of this UserAgentValidateResponse.

        The CPU platform of the User-Agent (e.g. x64)  # noqa: E501

        :param operating_system_cpu_platform: The operating_system_cpu_platform of this UserAgentValidateResponse.  # noqa: E501
        :type: str
        """

        self._operating_system_cpu_platform = operating_system_cpu_platform

    @property
    def operating_system_version(self):
        """Gets the operating_system_version of this UserAgentValidateResponse.  # noqa: E501

        The version of the operating system of the User-Agent (e.g. \"10\" for Windows 10)  # noqa: E501

        :return: The operating_system_version of this UserAgentValidateResponse.  # noqa: E501
        :rtype: str
        """
        return self._operating_system_version

    @operating_system_version.setter
    def operating_system_version(self, operating_system_version):
        """Sets the operating_system_version of this UserAgentValidateResponse.

        The version of the operating system of the User-Agent (e.g. \"10\" for Windows 10)  # noqa: E501

        :param operating_system_version: The operating_system_version of this UserAgentValidateResponse.  # noqa: E501
        :type: str
        """

        self._operating_system_version = operating_system_version

    @property
    def device_type(self):
        """Gets the device_type of this UserAgentValidateResponse.  # noqa: E501

        Device type of the User-Agent; possible values are \"DESKTOP\", \"SMARTPHONE\", \"TABLET\"  # noqa: E501

        :return: The device_type of this UserAgentValidateResponse.  # noqa: E501
        :rtype: str
        """
        return self._device_type

    @device_type.setter
    def device_type(self, device_type):
        """Sets the device_type of this UserAgentValidateResponse.

        Device type of the User-Agent; possible values are \"DESKTOP\", \"SMARTPHONE\", \"TABLET\"  # noqa: E501

        :param device_type: The device_type of this UserAgentValidateResponse.  # noqa: E501
        :type: str
        """

        self._device_type = device_type

    @property
    def device_brand_name(self):
        """Gets the device_brand_name of this UserAgentValidateResponse.  # noqa: E501

        Brand name of the User-Agent  # noqa: E501

        :return: The device_brand_name of this UserAgentValidateResponse.  # noqa: E501
        :rtype: str
        """
        return self._device_brand_name

    @device_brand_name.setter
    def device_brand_name(self, device_brand_name):
        """Sets the device_brand_name of this UserAgentValidateResponse.

        Brand name of the User-Agent  # noqa: E501

        :param device_brand_name: The device_brand_name of this UserAgentValidateResponse.  # noqa: E501
        :type: str
        """

        self._device_brand_name = device_brand_name

    @property
    def device_model(self):
        """Gets the device_model of this UserAgentValidateResponse.  # noqa: E501

        Model name or number of the User-Agent  # noqa: E501

        :return: The device_model of this UserAgentValidateResponse.  # noqa: E501
        :rtype: str
        """
        return self._device_model

    @device_model.setter
    def device_model(self, device_model):
        """Sets the device_model of this UserAgentValidateResponse.

        Model name or number of the User-Agent  # noqa: E501

        :param device_model: The device_model of this UserAgentValidateResponse.  # noqa: E501
        :type: str
        """

        self._device_model = device_model

    @property
    def browser_name(self):
        """Gets the browser_name of this UserAgentValidateResponse.  # noqa: E501

        Name of the Browser  # noqa: E501

        :return: The browser_name of this UserAgentValidateResponse.  # noqa: E501
        :rtype: str
        """
        return self._browser_name

    @browser_name.setter
    def browser_name(self, browser_name):
        """Sets the browser_name of this UserAgentValidateResponse.

        Name of the Browser  # noqa: E501

        :param browser_name: The browser_name of this UserAgentValidateResponse.  # noqa: E501
        :type: str
        """

        self._browser_name = browser_name

    @property
    def browser_version(self):
        """Gets the browser_version of this UserAgentValidateResponse.  # noqa: E501

        Version of the Browser  # noqa: E501

        :return: The browser_version of this UserAgentValidateResponse.  # noqa: E501
        :rtype: str
        """
        return self._browser_version

    @browser_version.setter
    def browser_version(self, browser_version):
        """Sets the browser_version of this UserAgentValidateResponse.

        Version of the Browser  # noqa: E501

        :param browser_version: The browser_version of this UserAgentValidateResponse.  # noqa: E501
        :type: str
        """

        self._browser_version = browser_version

    @property
    def browser_engine_name(self):
        """Gets the browser_engine_name of this UserAgentValidateResponse.  # noqa: E501

        Name of the Browser Engine  # noqa: E501

        :return: The browser_engine_name of this UserAgentValidateResponse.  # noqa: E501
        :rtype: str
        """
        return self._browser_engine_name

    @browser_engine_name.setter
    def browser_engine_name(self, browser_engine_name):
        """Sets the browser_engine_name of this UserAgentValidateResponse.

        Name of the Browser Engine  # noqa: E501

        :param browser_engine_name: The browser_engine_name of this UserAgentValidateResponse.  # noqa: E501
        :type: str
        """

        self._browser_engine_name = browser_engine_name

    @property
    def browser_engine_version(self):
        """Gets the browser_engine_version of this UserAgentValidateResponse.  # noqa: E501

        Version of the Browser Engine  # noqa: E501

        :return: The browser_engine_version of this UserAgentValidateResponse.  # noqa: E501
        :rtype: str
        """
        return self._browser_engine_version

    @browser_engine_version.setter
    def browser_engine_version(self, browser_engine_version):
        """Sets the browser_engine_version of this UserAgentValidateResponse.

        Version of the Browser Engine  # noqa: E501

        :param browser_engine_version: The browser_engine_version of this UserAgentValidateResponse.  # noqa: E501
        :type: str
        """

        self._browser_engine_version = browser_engine_version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserAgentValidateResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserAgentValidateResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
