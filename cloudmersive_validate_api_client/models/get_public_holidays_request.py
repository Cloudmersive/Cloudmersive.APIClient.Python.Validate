# coding: utf-8

"""
    validateapi

    The validation APIs help you validate data. Check if an E-mail address is real. Check if a domain is real. Check up on an IP address, and even where it is located. All this and much more is available in the validation API.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GetPublicHolidaysRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'raw_country_input': 'str',
        'year': 'int'
    }

    attribute_map = {
        'raw_country_input': 'RawCountryInput',
        'year': 'Year'
    }

    def __init__(self, raw_country_input=None, year=None):  # noqa: E501
        """GetPublicHolidaysRequest - a model defined in Swagger"""  # noqa: E501

        self._raw_country_input = None
        self._year = None
        self.discriminator = None

        if raw_country_input is not None:
            self.raw_country_input = raw_country_input
        if year is not None:
            self.year = year

    @property
    def raw_country_input(self):
        """Gets the raw_country_input of this GetPublicHolidaysRequest.  # noqa: E501

        Two-letter code (FIPS 10-4 or ISO 3166-1) of the country; if not specified, defaults to United States  # noqa: E501

        :return: The raw_country_input of this GetPublicHolidaysRequest.  # noqa: E501
        :rtype: str
        """
        return self._raw_country_input

    @raw_country_input.setter
    def raw_country_input(self, raw_country_input):
        """Sets the raw_country_input of this GetPublicHolidaysRequest.

        Two-letter code (FIPS 10-4 or ISO 3166-1) of the country; if not specified, defaults to United States  # noqa: E501

        :param raw_country_input: The raw_country_input of this GetPublicHolidaysRequest.  # noqa: E501
        :type: str
        """

        self._raw_country_input = raw_country_input

    @property
    def year(self):
        """Gets the year of this GetPublicHolidaysRequest.  # noqa: E501

        Optional - the year in which to retrieve the holidays; if left blank (0) it will default to the current year  # noqa: E501

        :return: The year of this GetPublicHolidaysRequest.  # noqa: E501
        :rtype: int
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this GetPublicHolidaysRequest.

        Optional - the year in which to retrieve the holidays; if left blank (0) it will default to the current year  # noqa: E501

        :param year: The year of this GetPublicHolidaysRequest.  # noqa: E501
        :type: int
        """

        self._year = year

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetPublicHolidaysRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetPublicHolidaysRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
