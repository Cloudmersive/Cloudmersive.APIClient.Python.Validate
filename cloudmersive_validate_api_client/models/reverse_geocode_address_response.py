# coding: utf-8

"""
    validateapi

    The validation APIs help you validate data. Check if an E-mail address is real. Check if a domain is real. Check up on an IP address, and even where it is located. All this and much more is available in the validation API.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ReverseGeocodeAddressResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'successful': 'bool',
        'street_address': 'str',
        'city': 'str',
        'state_or_province': 'str',
        'postal_code': 'str',
        'country_full_name': 'str',
        'country_code': 'str'
    }

    attribute_map = {
        'successful': 'Successful',
        'street_address': 'StreetAddress',
        'city': 'City',
        'state_or_province': 'StateOrProvince',
        'postal_code': 'PostalCode',
        'country_full_name': 'CountryFullName',
        'country_code': 'CountryCode'
    }

    def __init__(self, successful=None, street_address=None, city=None, state_or_province=None, postal_code=None, country_full_name=None, country_code=None):  # noqa: E501
        """ReverseGeocodeAddressResponse - a model defined in Swagger"""  # noqa: E501

        self._successful = None
        self._street_address = None
        self._city = None
        self._state_or_province = None
        self._postal_code = None
        self._country_full_name = None
        self._country_code = None
        self.discriminator = None

        if successful is not None:
            self.successful = successful
        if street_address is not None:
            self.street_address = street_address
        if city is not None:
            self.city = city
        if state_or_province is not None:
            self.state_or_province = state_or_province
        if postal_code is not None:
            self.postal_code = postal_code
        if country_full_name is not None:
            self.country_full_name = country_full_name
        if country_code is not None:
            self.country_code = country_code

    @property
    def successful(self):
        """Gets the successful of this ReverseGeocodeAddressResponse.  # noqa: E501

        True if the address operation was successful, false otherwise  # noqa: E501

        :return: The successful of this ReverseGeocodeAddressResponse.  # noqa: E501
        :rtype: bool
        """
        return self._successful

    @successful.setter
    def successful(self, successful):
        """Sets the successful of this ReverseGeocodeAddressResponse.

        True if the address operation was successful, false otherwise  # noqa: E501

        :param successful: The successful of this ReverseGeocodeAddressResponse.  # noqa: E501
        :type: bool
        """

        self._successful = successful

    @property
    def street_address(self):
        """Gets the street_address of this ReverseGeocodeAddressResponse.  # noqa: E501

        Street address to validate, such as '2950 Buskirk Ave.'  # noqa: E501

        :return: The street_address of this ReverseGeocodeAddressResponse.  # noqa: E501
        :rtype: str
        """
        return self._street_address

    @street_address.setter
    def street_address(self, street_address):
        """Sets the street_address of this ReverseGeocodeAddressResponse.

        Street address to validate, such as '2950 Buskirk Ave.'  # noqa: E501

        :param street_address: The street_address of this ReverseGeocodeAddressResponse.  # noqa: E501
        :type: str
        """

        self._street_address = street_address

    @property
    def city(self):
        """Gets the city of this ReverseGeocodeAddressResponse.  # noqa: E501

        City part of the addrerss to validate, such as 'Walnut Creek'  # noqa: E501

        :return: The city of this ReverseGeocodeAddressResponse.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this ReverseGeocodeAddressResponse.

        City part of the addrerss to validate, such as 'Walnut Creek'  # noqa: E501

        :param city: The city of this ReverseGeocodeAddressResponse.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def state_or_province(self):
        """Gets the state_or_province of this ReverseGeocodeAddressResponse.  # noqa: E501

        State or province of the address to validate, such as 'CA' or 'California'  # noqa: E501

        :return: The state_or_province of this ReverseGeocodeAddressResponse.  # noqa: E501
        :rtype: str
        """
        return self._state_or_province

    @state_or_province.setter
    def state_or_province(self, state_or_province):
        """Sets the state_or_province of this ReverseGeocodeAddressResponse.

        State or province of the address to validate, such as 'CA' or 'California'  # noqa: E501

        :param state_or_province: The state_or_province of this ReverseGeocodeAddressResponse.  # noqa: E501
        :type: str
        """

        self._state_or_province = state_or_province

    @property
    def postal_code(self):
        """Gets the postal_code of this ReverseGeocodeAddressResponse.  # noqa: E501

        Zip code or postal code of the address to validate, such as '94597'  # noqa: E501

        :return: The postal_code of this ReverseGeocodeAddressResponse.  # noqa: E501
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this ReverseGeocodeAddressResponse.

        Zip code or postal code of the address to validate, such as '94597'  # noqa: E501

        :param postal_code: The postal_code of this ReverseGeocodeAddressResponse.  # noqa: E501
        :type: str
        """

        self._postal_code = postal_code

    @property
    def country_full_name(self):
        """Gets the country_full_name of this ReverseGeocodeAddressResponse.  # noqa: E501

        Name of the country, such as 'United States'.  Global countries are supported.  # noqa: E501

        :return: The country_full_name of this ReverseGeocodeAddressResponse.  # noqa: E501
        :rtype: str
        """
        return self._country_full_name

    @country_full_name.setter
    def country_full_name(self, country_full_name):
        """Sets the country_full_name of this ReverseGeocodeAddressResponse.

        Name of the country, such as 'United States'.  Global countries are supported.  # noqa: E501

        :param country_full_name: The country_full_name of this ReverseGeocodeAddressResponse.  # noqa: E501
        :type: str
        """

        self._country_full_name = country_full_name

    @property
    def country_code(self):
        """Gets the country_code of this ReverseGeocodeAddressResponse.  # noqa: E501

        Three-letter ISO 3166-1 country code  # noqa: E501

        :return: The country_code of this ReverseGeocodeAddressResponse.  # noqa: E501
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this ReverseGeocodeAddressResponse.

        Three-letter ISO 3166-1 country code  # noqa: E501

        :param country_code: The country_code of this ReverseGeocodeAddressResponse.  # noqa: E501
        :type: str
        """

        self._country_code = country_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReverseGeocodeAddressResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReverseGeocodeAddressResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
